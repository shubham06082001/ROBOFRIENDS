{"version":3,"sources":["containers/loading.gif","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","components/CounterButton.js","components/Header.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["module","exports","Card","name","email","id","className","src","alt","CardList","robots","map","user","i","key","SearchBox","searchField","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","borderTop","height","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","CounterButton","updateCount","count","color","onClick","Header","nextProps","nextState","App","onRequestRobots","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","LoadingSpinner","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","Boolean","window","location","hostname","match","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.30c92a71.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/loading.71ebf319.gif\";","import React from \"react\";\n\nconst Card = ({ name, email, id }) => {\n  return (\n    <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw-2 shadow-5\">\n      <img src={`https://robohash.org/${id}?size=200x200`} alt={`${name}`} />\n      <div>\n        <h2 className=\"ttu tracked green\">{name}</h2>\n        <p className=\"ttl purple\">{email}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default Card;\n","import React from \"react\";\nimport Card from \"./Card\";\n\nconst CardList = ({ robots }) => {\n  // console.log('CardList');\n  return (\n    <div>\n      {robots.map((user, i) => {\n        return (\n          <Card\n            id={robots[i].id}\n            name={robots[i].name}\n            email={robots[i].email}\n            key={robots[i].id}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default CardList;\n","import React from \"react\";\n\nconst SearchBox = ({ searchField, searchChange }) => {\n  // console.log(\"SearchBox\");\n  return (\n    <div className=\"pa2\">\n      <input\n        className=\"pa3 ba b--green bg-lightest-blue\"\n        type=\"search\"\n        placeholder=\"Search Robots\"\n        onChange={searchChange}\n      />\n    </div>\n  );\n};\n\nexport default SearchBox;\n","import React from \"react\";\n\nconst Scroll = (props) => {\n  return (\n    <div\n      style={{\n        overflowY: \"scroll\",\n        borderTop: \"2px solid white\",\n        height: \"800px\",\n      }}\n    >\n      {props.children}\n    </div>\n  );\n};\nexport default Scroll;\n","import React, { Component } from \"react\";\n\nclass ErrorBoundary extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasError: false,\n    };\n  }\n  componentDidCatch(error, info) {\n    this.setState({ hasError: true });\n  }\n  render() {\n    if (this.state.hasError) {\n      return <h1>Ooops! Something went wrong!</h1>;\n    }\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundary;\n","import React, { Component } from \"react\";\n\nclass CounterButton extends Component {\n  constructor() {\n    super();\n    this.state = {\n      count: 0,\n    };\n  }\n\n//   shouldComponentUpdate(nextProps, nextState) {\n//     if (this.state.count !== nextState.count) {\n//       return true;\n//     }\n//     return false;\n//   }\n\n  updateCount = () => {\n    this.setState((state) => {\n      return { count: state.count + 1 };\n    });\n  };\n  render() {\n    // console.log(\"CounterButton \");\n    return (\n      <button color={this.props.color} onClick={this.updateCount}>\n        Count: {this.state.count}\n      </button>\n    );\n  }\n}\nexport default CounterButton;\n","import React, { Component } from \"react\";\nimport CounterButton from \"./CounterButton\";\n\nclass Header extends Component {\n  shouldComponentUpdate(nextProps, nextState) {\n    return false;\n  }\n  render() {\n    // console.log(\"Header\");\n    return (\n      <div>\n        <h1 className=\"f1\">RoboFriends</h1>\n        <CounterButton color={\"red\"} />\n      </div>\n    );\n  }\n}\nexport default Header;\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport CardList from \"../components/CardList\";\nimport SearchBox from \"../components/SearchBox\";\nimport Scroll from \"../components/Scroll\";\nimport \"./App.css\";\nimport ErrorBoundary from \"../components/ErrorBoundary\";\nimport { setSearchField, requestRobots } from \"../actions\";\nimport LoadingSpinner from \"./loading.gif\";\nimport Header from \"../components/Header\";\n\nconst mapStateToProps = (state) => {\n  return {\n    searchField: state.searchRobots.searchField,\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending,\n    error: state.requestRobots.error,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n    onRequestRobots: () => dispatch(requestRobots()),\n  };\n};\n\nclass App extends Component {\n  componentDidMount() {\n    this.props.onRequestRobots();\n  }\n\n  render() {\n    const { searchField, onSearchChange, robots, isPending } = this.props;\n    const filteredRobots = robots.filter((robot) => {\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\n    });\n    return isPending ? (\n      <div>\n        <img src={LoadingSpinner} alt=\"Loading...\" />\n        <h1>Loading... </h1>\n      </div>\n    ) : (\n      <div className=\"tc\">\n        <Header />\n        <SearchBox searchChange={onSearchChange} />\n        <Scroll>\n          <ErrorBoundary>\n            <CardList robots={filteredRobots} />\n          </ErrorBoundary>\n        </Scroll>\n      </div>\n    );\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED,\n} from \"./constants\";\n\nexport const setSearchField = (text) => ({\n  type: CHANGE_SEARCH_FIELD,\n  payload: text,\n});\n\nexport const requestRobots = () => (dispatch) => {\n  dispatch({\n    type: REQUEST_ROBOTS_PENDING,\n  });\n  fetch(\"https://jsonplaceholder.typicode.com/users\").then((response) =>\n    response\n      .json()\n      .then((data) =>\n        dispatch({\n          type: REQUEST_ROBOTS_SUCCESS,\n          payload: data,\n        })\n      )\n      .catch((error) =>\n        dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error })\n      )\n  );\n};\n","export const CHANGE_SEARCH_FIELD = \"CHANGE_SEARCH_FIELD\";\n\nexport const REQUEST_ROBOTS_PENDING = \"REQUEST_ROBOTS_PENDING\";\nexport const REQUEST_ROBOTS_SUCCESS = \"REQUEST_ROBOTS_SUCCESS\";\nexport const REQUEST_ROBOTS_FAILED = \"REQUEST_ROBOTS_FAILED\";\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED,\n} from \"./constants\";\n\nconst initialStateSearch = {\n  searchField: \"\",\n};\n\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\n  switch (action.type) {\n    case CHANGE_SEARCH_FIELD:\n      return Object.assign({}, state, { searchField: action.payload });\n    default:\n      return state;\n  }\n};\n\nconst initialStateRobots = {\n  isPending: false,\n  robots: [],\n  error: \"\",\n};\n\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\n  switch (action.type) {\n    case REQUEST_ROBOTS_PENDING:\n      return Object.assign({}, state, { isPending: true });\n    case REQUEST_ROBOTS_SUCCESS:\n      return Object.assign({}, state, {\n        robots: action.payload,\n        isPending: false,\n      });\n    case REQUEST_ROBOTS_FAILED:\n      return Object.assign({}, state, {\n        error: action.payload,\n        isPending: false,\n      });\n    default:\n      return state;\n  }\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { createStore, applyMiddleware, combineReducers } from \"redux\";\nimport { createLogger } from \"redux-logger\";\nimport thunkMiddleware from \"redux-thunk\";\nimport \"./index.css\";\nimport App from \"./containers/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"tachyons\";\nimport { searchRobots, requestRobots } from \"./reducers\";\n\nconst logger = createLogger();\n\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\n\nconst store = createStore(\n  rootReducer,\n  applyMiddleware(thunkMiddleware, logger)\n);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}